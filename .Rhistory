install.packages(c("boot", "class", "evaluate", "foreign", "fs", "knitr", "MASS", "Matrix", "nlme", "rmarkdown", "sass", "spatial", "survival", "vctrs", "yaml"))
plot(cars)
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
F_n = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
Fn = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
a = m - 3*sigma
b = m + 3 * sigma
N = 500
t = seq(a,b,by =  (b-a)/N)
Fnt = Fn(t)
F = pnorm(t, mean = m, sd = sigma)
plot(t,Fnt, type = "l", col = "blue", main = "ecdf and cdf")
par(new = TRUE)
plot()
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
Fn = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
a = m - 3*sigma
b = m + 3 * sigma
N = 500
t = seq(a,b,by =  (b-a)/N)
Fnt = Fn(t)
F = pnorm(t, mean = m, sd = sigma)
plot(t,Fnt, type = "l", col = "blue", main = "ecdf and cdf")
par(new = TRUE)
plot(t, F, type = "l", col = "red")
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
Fn = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
a = m - 3*sigma
b = m + 3 * sigma
N = 500
t = seq(a,b,by =  (b-a)/N)
Fnt = Fn(t)
F = pnorm(t, mean = m, sd = sigma)
plot(t,Fnt, type = "l", col = "blue", main = "ecdf and cdf")
par(new = TRUE)
plot(t, F, type = "l", col = "red")
n = 1000
m = 0.3
sigma = 1.4
epsilon = 0.05
M <- 1000
vD <- numeric(M)
for(i in 1:M) {
X <- rnorm(n,mean = m, sd = sigma)
Fn <- ecdf(X)
}
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
Fn = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
a = m - 3*sigma
b = m + 3 * sigma
N = 500
t = seq(a,b,by =  (b-a)/N)
Fnt = Fn(t)
F = pnorm(t, mean = m, sd = sigma)
plot(t,Fnt, type = "l", col = "blue", main = "ecdf and cdf")
par(new = TRUE)
plot(t, F, type = "l", col = "red")
n = 1000
m = 0.3
sigma = 1.4
epsilon = 0.05
M <- 1000
vD <- numeric(M)
for(i in 1:M) {
X <- rnorm(n,mean = m, sd = sigma)
Fn <- ecdf(X)
}
i <- c(1,2,3,4)
u_i <- function(i) {
u <- c(i[1])
for (k in 2:(length(i))) {
u <- append(u, i[k] + i[k-1])
}
return(u)
}
ui = u_i(i)
print(ui)
i <- c(1,2,3,4)
u_i <- function(i) {
u <- c(i[1])
for (k in 2:(length(i))) {
u <- append(u, i[k] + i[k-1])
}
return(u)
}
ui = u_i(i)
pi <- c(0.1, 0.3, 0.4, 0.2)
n = 100
ri = runif(n , min = 0, max = 1)
ri
install.packages(c("codetools", "markdown", "nlme", "tinytex", "xfun"))
setwd("~/Etudes/MAM/MAM4/S2/Valo_Donnee/Projet")
us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
read.gif("gif.gif", frame=0, flip=FALSE, verbose=FALSE)
us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
data(iris) # Chargement d'une base de donnée
dim(iris) # Nombre de ligne et nbr de variable
class(iris) # Type d'objet que l'on traite
summary(iris) # Résumé statistique par colone de la base de données
head(iris) #
sapply(iris, class) # comme apply ci-dessus mais appliqué à chaque vecteur de iris
View(iris)
data(us_accident) # Chargement d'une base de donnée
dim(us_accident) # Nombre de ligne et nbr de variable
class(us_accident) # Type d'objet que l'on traite
summary(us_accident) # Résumé statistique par colone de la base de données
head(us_accident) #
sapply(us_accident, class) # comme apply ci-dessus mais appliqué à chaque vecteur de iris
