install.packages(c("boot", "class", "evaluate", "foreign", "fs", "knitr", "MASS", "Matrix", "nlme", "rmarkdown", "sass", "spatial", "survival", "vctrs", "yaml"))
plot(cars)
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
F_n = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
Fn = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
a = m - 3*sigma
b = m + 3 * sigma
N = 500
t = seq(a,b,by =  (b-a)/N)
Fnt = Fn(t)
F = pnorm(t, mean = m, sd = sigma)
plot(t,Fnt, type = "l", col = "blue", main = "ecdf and cdf")
par(new = TRUE)
plot()
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
Fn = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
a = m - 3*sigma
b = m + 3 * sigma
N = 500
t = seq(a,b,by =  (b-a)/N)
Fnt = Fn(t)
F = pnorm(t, mean = m, sd = sigma)
plot(t,Fnt, type = "l", col = "blue", main = "ecdf and cdf")
par(new = TRUE)
plot(t, F, type = "l", col = "red")
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
Fn = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
a = m - 3*sigma
b = m + 3 * sigma
N = 500
t = seq(a,b,by =  (b-a)/N)
Fnt = Fn(t)
F = pnorm(t, mean = m, sd = sigma)
plot(t,Fnt, type = "l", col = "blue", main = "ecdf and cdf")
par(new = TRUE)
plot(t, F, type = "l", col = "red")
n = 1000
m = 0.3
sigma = 1.4
epsilon = 0.05
M <- 1000
vD <- numeric(M)
for(i in 1:M) {
X <- rnorm(n,mean = m, sd = sigma)
Fn <- ecdf(X)
}
n = 1000
m = 0.3
sigma = 1.4
X <- rnorm(n, mean = m, sd = sigma)
Fn = ecdf(X)
plot(Fn, col = "blue", main = "ecdf")
a = m - 3*sigma
b = m + 3 * sigma
N = 500
t = seq(a,b,by =  (b-a)/N)
Fnt = Fn(t)
F = pnorm(t, mean = m, sd = sigma)
plot(t,Fnt, type = "l", col = "blue", main = "ecdf and cdf")
par(new = TRUE)
plot(t, F, type = "l", col = "red")
n = 1000
m = 0.3
sigma = 1.4
epsilon = 0.05
M <- 1000
vD <- numeric(M)
for(i in 1:M) {
X <- rnorm(n,mean = m, sd = sigma)
Fn <- ecdf(X)
}
i <- c(1,2,3,4)
u_i <- function(i) {
u <- c(i[1])
for (k in 2:(length(i))) {
u <- append(u, i[k] + i[k-1])
}
return(u)
}
ui = u_i(i)
print(ui)
i <- c(1,2,3,4)
u_i <- function(i) {
u <- c(i[1])
for (k in 2:(length(i))) {
u <- append(u, i[k] + i[k-1])
}
return(u)
}
ui = u_i(i)
pi <- c(0.1, 0.3, 0.4, 0.2)
n = 100
ri = runif(n , min = 0, max = 1)
ri
install.packages(c("codetools", "markdown", "nlme", "tinytex", "xfun"))
rm(list = ls())
#us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
us_accident <- read.csv('US_Accidents_Dec21_updated.csv', stringsAsFactors = TRUE, skipNul = TRUE, na.strings=c(''))
library("dplyr")
us_accident_cor <- us_accident %>%
mutate_if(is.factor, as.numeric)
sapply(us_accident, class)
matrice_correlation <- cor(us_accident_cor)
matrice_correlation
matrice_correlation <- cor(us_accident_cor, na.rm = TRUE)
matrice_correlation <- cor(us_accident_cor, na.rm = TRUE)
matrice_correlation <- cor(us_accident_cor, y = NULL, na.rm = TRUE)
matrice_correlation <- cor(us_accident_cor, na.rm=TRUE)
matrice_correlation <- cor(us_accident_cor, NULL, TRUE)
matrice_correlation <- cor(us_accident_cor, na.rm=TRUE)
matrice_correlation <- cor(us_accident_cor) # use="complete.obs" ?
matrice_correlation
install.packages("Hmisc")
us_accidents.pval <- rcorr(as.matrix(us_accident_cor))
install.packages("Hmisc")
us_accidents.pval <- rcorr(as.matrix(us_accident_cor))
#install.packages("Hmisc")
load("Hmisc")
#install.packages("Hmisc")
library("Hmisc")
us_accidents.pval <- rcorr(as.matrix(us_accident_cor))
us_accidents.pval
Normalise_matrice <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
install.packages("corrplot")
library("corrplot")
corrplot(matrice_correlation, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#install.packages("corrplot")
library("corrplot")
corrplot(matrice_correlation, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#install.packages("corrplot")
library("corrplot")
print('yess')
corrplot(matrice_correlation, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0), type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0), type = "upper", order = "hclust",
tl.col = "black")
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0), type = "upper", order = "hclust",
tl.col = "black", tl.srt = 500)
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0), type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(matrice_correlation, histogram=TRUE, pch=19)
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(replace(matrice_correlation, is.na(matrice_correlation), 0),
histogram=TRUE, pch=19)
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(replace(matrice_correlation, is.na(matrice_correlation), 0),
histogram=TRUE, pch=19)
col<- colorRampPalette(c("blue", "white", "red", "green", "purple", "gray", "pink"))(20)
heatmap(x = replace(matrice_correlation, is.na(matrice_correlation), col = col, symm = TRUE)
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = replace(matrice_correlation, is.na(matrice_correlation), col = col, symm = TRUE)
col<- colorRampPalette(c("blue", "white", "red", "green", "purple", "gray", "pink"))(20)
heatmap(x = replace(matrice_correlation, is.na(matrice_correlation), 0), col = col, symm = TRUE)
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0),
type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, cl.offset = 1)
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0),
type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, cl.offset = 0.01)
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0),
type = "upper", order = "hclust",
tl.col = "black", tl.srt = 1000)
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0),
type = "upper", order = "hclust",
tl.col = "black", tl.srt = 1)
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0),
type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#install.packages("corrplot")
library("corrplot")
corrplot(replace(matrice_correlation, is.na(matrice_correlation), 0),
type = "upper", order = "hclust",
tl.col = "black", tl.srt = 90)
rm(list = ls())
# Lien bien utile http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software#compute-correlation-matrix
# us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
us_accident <- read.csv("US_Accidents_Dec21_updated.csv", stringsAsFactors = TRUE, skipNul = TRUE, na.strings = c(""))
# install.packages("dplyr")
library("dplyr")
us_accident_cor <- us_accident %>%
mutate_if(is.factor, as.numeric)
sapply(us_accident, class)
matrice_correlation <- replace(us_accident(us_accident), is.na(us_accident), 0) # use="complete.obs" ?
matrice_correlation <- replace(cor(us_accident), is.na(us_accident), 0) # use="complete.obs" ?
matrice_correlation <- replace(cor(us_accident_cor), is.na(us_accident), 0) # use="complete.obs" ?
matrice_correlation
temp <- cor(us_accident_cor)
matrice_correlation <- replace(temp, is.na(temp), 0) # use="complete.obs" ?
matrice_correlation
# install.packages("Hmisc")
library("Hmisc")
matrice_correlation_p <- rcorr(as.matrix(us_accident_cor))
matrice_correlation_p
Normalise_matrice <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor = (cormat)[ut],
p = pmat[ut]
)
}
# install.packages("corrplot")
library("corrplot")
corrplot(matrice_correlation, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
# install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(replace(matrice_correlation, is.na(matrice_correlation), 0),
histogram = TRUE, pch = 19
)
# Trop d'Avis ! (le résultat est en bas - y'a un bouton pour réduire le résultat juste en dessous de la cellule)
col <- colorRampPalette(c("blue", "white", "red", "green", "purple", "gray", "pink"))(20)
heatmap(x = replace(matrice_correlation, is.na(matrice_correlation), 0), col = col, symm = TRUE)
rm(list = ls())
# Lien bien utile http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software#compute-correlation-matrix
# us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
us_accident <- read.csv("US_Accidents_Dec21_updated.csv", stringsAsFactors = TRUE, skipNul = TRUE, na.strings = c(""))
install.packages("dplyr")
library("dplyr")
# On enlève les colonnes qui ne nous intéressent pas
# TODO
# On convertie les string en numérique (pour pouvoir faire des calculs dessus)
us_accident_cor <- us_accident %>%
mutate_if(is.factor, as.numeric)
sapply(us_accident, class)
temp <- cor(us_accident_cor)
matrice_correlation <- replace(temp, is.na(temp), 0) # use="complete.obs" ?
matrice_correlation
# install.packages("Hmisc")
library("Hmisc")
matrice_correlation_p <- rcorr(as.matrix(us_accident_cor))
matrice_correlation_p
Normalise_matrice <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor = (cormat)[ut],
p = pmat[ut]
)
}
install.packages("corrplot")
library("corrplot")
corrplot(matrice_correlation, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
Normalise_matrice(matrice_correlation, matrice_correlation_p$P)
Normalise_matrice(matrice_correlation, matrice_correlation_p$P) %>%
filter(cor > 0.5)
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(replace(matrice_correlation, is.na(matrice_correlation), 0),
histogram = TRUE, pch = 19
)
# Trop d'Avis ! (le résultat est en bas - y'a un bouton pour réduire le résultat juste en dessous de la cellule)
col <- colorRampPalette(c("blue", "white", "red", "green", "purple", "gray", "pink"))(20)
heatmap(x = replace(matrice_correlation, is.na(matrice_correlation), 0), col = col, symm = TRUE)
# Pour chaque variable, on fait un histogramme
for (i in 1:ncol(us_accident_cor)) {
hist(us_accident_cor[,i], main = colnames(us_accident_cor)[i])
}
install.packages("amap")
library("amap")
matrice_correlation <- scale(matrice_correlation)
matrice_correlation <- t(matrice_correlation)
mydi = Dist(matrice_correlation,method="abspearson") # Distance sur la valeur absolue des corrélation (peut importe que ce soit neg ou pos)
myclust <- hclust(mydi)
plot(myclust)
library("cluster")
clusplot(matrice_correlation, myclust$labels, color=TRUE, shade=TRUE, labels=2, lines=0)
rm(list = ls())
# Lien bien utile http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software#compute-correlation-matrix
# us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
us_accident <- read.csv("Kaagle_Upload.csv", stringsAsFactors = TRUE, skipNul = TRUE, na.strings = c(""), sep = ",")
#install.packages("dplyr")
library("dplyr")
# On enlève les colonnes qui ne nous intéressent pas
# TODO
# On convertie les string en numérique (pour pouvoir faire des calculs dessus)
us_accident_cor <- us_accident %>%
mutate_if(is.factor, as.numeric)
sapply(us_accident, class)
temp <- cor(us_accident_cor)
matrice_correlation <- replace(temp, is.na(temp), 0) # use="complete.obs" ?
matrice_correlation
# install.packages("Hmisc")
library("Hmisc")
matrice_correlation_p <- rcorr(as.matrix(us_accident_cor))
matrice_correlation_p
Normalise_matrice <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor = (cormat)[ut],
p = pmat[ut]
)
}
#install.packages("corrplot")
library("corrplot")
corrplot(matrice_correlation, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
Normalise_matrice(matrice_correlation, matrice_correlation_p$P)
Normalise_matrice(matrice_correlation, matrice_correlation_p$P) %>%
filter(cor > 0.5)
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(replace(matrice_correlation, is.na(matrice_correlation), 0),
histogram = TRUE, pch = 19
)
# Trop d'Avis ! (le résultat est en bas - y'a un bouton pour réduire le résultat juste en dessous de la cellule)
col <- colorRampPalette(c("blue", "white", "red", "green", "purple", "gray", "pink"))(20)
heatmap(x = replace(matrice_correlation, is.na(matrice_correlation), 0), col = col, symm = TRUE)
# Pour chaque variable, on fait un histogramme
for (i in 1:ncol(us_accident_cor)) {
hist(us_accident_cor[,i], main = colnames(us_accident_cor)[i])
}
install.packages("amap")
library("amap")
matrice_correlation <- scale(matrice_correlation)
matrice_correlation <- t(matrice_correlation)
mydi = Dist(matrice_correlation,method="abspearson") # Distance sur la valeur absolue des corrélation (peut importe que ce soit neg ou pos)
myclust <- hclust(mydi)
plot(myclust)
library("cluster")
clusplot(matrice_correlation, myclust$labels, color=TRUE, shade=TRUE, labels=2, lines=0)
# us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
us_accident <- read.csv("Global_Earthquake.csv", stringsAsFactors = TRUE, skipNul = TRUE, na.strings = c(""), sep = ",")
rm(list = ls())
# Lien bien utile http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software#compute-correlation-matrix
# us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
us_accident <- read.csv("Global_Earthquake_Data.csv", stringsAsFactors = TRUE, skipNul = TRUE, na.strings = c(""), sep = ",")
#install.packages("dplyr")
library("dplyr")
# On enlève les colonnes qui ne nous intéressent pas
# TODO
# On convertie les string en numérique (pour pouvoir faire des calculs dessus)
us_accident_cor <- us_accident %>%
mutate_if(is.factor, as.numeric)
sapply(us_accident, class)
temp <- cor(us_accident_cor)
matrice_correlation <- replace(temp, is.na(temp), 0) # use="complete.obs" ?
matrice_correlation
# install.packages("Hmisc")
library("Hmisc")
matrice_correlation_p <- rcorr(as.matrix(us_accident_cor))
matrice_correlation_p
Normalise_matrice <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor = (cormat)[ut],
p = pmat[ut]
)
}
#install.packages("corrplot")
library("corrplot")
corrplot(matrice_correlation, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
Normalise_matrice(matrice_correlation, matrice_correlation_p$P)
Normalise_matrice(matrice_correlation, matrice_correlation_p$P) %>%
filter(cor > 0.5)
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(replace(matrice_correlation, is.na(matrice_correlation), 0),
histogram = TRUE, pch = 19
)
# Trop d'Avis ! (le résultat est en bas - y'a un bouton pour réduire le résultat juste en dessous de la cellule)
col <- colorRampPalette(c("blue", "white", "red", "green", "purple", "gray", "pink"))(20)
heatmap(x = replace(matrice_correlation, is.na(matrice_correlation), 0), col = col, symm = TRUE)
# Pour chaque variable, on fait un histogramme
for (i in 1:ncol(us_accident_cor)) {
hist(us_accident_cor[,i], main = colnames(us_accident_cor)[i])
}
install.packages("amap")
library("amap")
matrice_correlation <- scale(matrice_correlation)
matrice_correlation <- t(matrice_correlation)
mydi = Dist(matrice_correlation,method="abspearson") # Distance sur la valeur absolue des corrélation (peut importe que ce soit neg ou pos)
myclust <- hclust(mydi)
plot(myclust)
library("cluster")
clusplot(matrice_correlation, myclust$labels, color=TRUE, shade=TRUE, labels=2, lines=0)
install.packages("amap")
chart.Correlation(replace(matrice_correlation, is.na(matrice_correlation), 0),
histogram = TRUE, pch = 19
)
chart.Correlation(replace(matrice_correlation, is.na(matrice_correlation), 0),
histogram = TRUE, pch = 19)
corrplot(matrice_correlation, type = "", order = "hclust",
tl.col = "black", tl.srt = 45)
upper
rm(list = ls())
# Lien bien utile http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software#compute-correlation-matrix
# us_accident <- read.csv('US_Accidents_Dec21_updated.csv')
us_accident <- read.csv("Global_Earthquake_Data.csv", stringsAsFactors = TRUE, skipNul = TRUE, na.strings = c(""), sep = ",")
#install.packages("dplyr")
library("dplyr")
# On enlève les colonnes qui ne nous intéressent pas
# TODO
# On convertie les string en numérique (pour pouvoir faire des calculs dessus)
us_accident_cor <- us_accident %>%
mutate_if(is.factor, as.numeric)
sapply(us_accident, class)
temp <- cor(us_accident_cor)
matrice_correlation <- replace(temp, is.na(temp), 0) # use="complete.obs" ?
matrice_correlation
# install.packages("Hmisc")
library("Hmisc")
matrice_correlation_p <- rcorr(as.matrix(us_accident_cor))
matrice_correlation_p
Normalise_matrice <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor = (cormat)[ut],
p = pmat[ut]
)
}
#install.packages("corrplot")
library("corrplot")
corrplot(matrice_correlation, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
Normalise_matrice(matrice_correlation, matrice_correlation_p$P)
Normalise_matrice(matrice_correlation, matrice_correlation_p$P) %>%
filter(cor > 0.5)
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(replace(matrice_correlation, is.na(matrice_correlation), 0),
histogram = TRUE, pch = 19
)
# Trop d'Avis ! (le résultat est en bas - y'a un bouton pour réduire le résultat juste en dessous de la cellule)
col <- colorRampPalette(c("blue", "white", "red", "green", "purple", "gray", "pink"))(20)
heatmap(x = replace(matrice_correlation, is.na(matrice_correlation), 0), col = col, symm = TRUE)
# Pour chaque variable, on fait un histogramme
for (i in 1:ncol(us_accident_cor)) {
hist(us_accident_cor[,i], main = colnames(us_accident_cor)[i])
}
install.packages("amap")
library("amap")
matrice_correlation <- scale(matrice_correlation)
matrice_correlation <- t(matrice_correlation)
mydi = Dist(matrice_correlation,method="abspearson") # Distance sur la valeur absolue des corrélation (peut importe que ce soit neg ou pos)
myclust <- hclust(mydi)
plot(myclust)
library("cluster")
clusplot(matrice_correlation, myclust$labels, color=TRUE, shade=TRUE, labels=2, lines=0)
setwd("~/Etudes/MAM/MAM4/S2/Valo_Donnee/R-Kaggle-MAM4")
diabete_dataset1 <- read.csv("/kaggle/input/diabetes-health-indicators-dataset/diabetes_012_health_indicators_BRFSS2015.csv", stringsAsFactors = TRUE, skipNul = TRUE, na.strings = c(""))
diabete_dataset1 <- read.csv("/kaggle/input/diabetes-health-indicators-dataset/diabetes_012_health_indicators_BRFSS2015.csv", stringsAsFactors = TRUE, skipNul = TRUE, na.strings = c(""))
diabete_dataset1 <- read.csv("/kaggle/input/diabetes-health-indicators-dataset/diabetes_012_health_indicators_BRFSS2015.csv", stringsAsFactors = TRUE, skipNul = TRUE, na.strings = c(""))
